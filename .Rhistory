multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA","AR"))
# checkbox Selection
checkboxGroupInput("Private.Match.WaiverSelect",
"Private.Match.Waiver:",
choices = sort(unique(data.load$Private.Match.Waiver)),
selected = c("Yes", "No")),
# select Selection
selectInput("StateSelect",
"State:",
choices = sort(unique(data.load$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA","AR"))
# checkbox Selection
checkboxGroupInput("Private.Match.WaiverSelect",
"Private.Match.Waiver:",
choices = sort(unique(data.load$Private.Match.Waiver)),
selected = c("Yes", "No"))
# Award Requested Selection
sliderInput("AwardRequestedSelect",
"Award Requested:",
min = min(data.load$Award.Requested, na.rm = T),
max = max(data.load$Award.Requested, na.rm = T),
value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)),
step = 1)
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Requested, na.rm = T), 2)
valueBox("Avg Award Requested", value = num, icon = "fa-balance-scale", color = "purple")
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
renderGauge({
rate <- round(as.numeric(length(input$StateSelect)) / length(unique(data.load$State)) * 100, 1)
gauge(rate, min = 0, max = 100, symbol = '%', gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)))
})
renderPlotly({
data <- subset(iaInput(), variable == "Award.Requested")
ggplot(data = data, aes(x = name, y = as.numeric(value), fill = name)) + geom_bar(stat = "identity")
})
renderPlotly({
dat <- iaInput()
ggplotly(
ggplot(data= dat, aes(x = Applicant, y = Award.Requested, fill = Award.Length , text = paste0("<b>", Applicant, ":</b>",
"<br>State:",State,
"<br>Award Requested:", Award.Requested
))) +
geom_point() +   theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
ggtitle("Count by Award Requested") +
xlab("Applicant") +
ylab("Award Requested"),
tooltip = "text")
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length, c(""), c(NA)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.numeric(Award.Length)
)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
# select Selection
selectInput("StateSelect",
"State:",
choices = sort(unique(data.load$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA","AR"))
# checkbox Selection
checkboxGroupInput("Private.Match.WaiverSelect",
"Private.Match.Waiver:",
choices = sort(unique(data.load$Private.Match.Waiver)),
selected = c("Yes", "No"))
# Award Requested Selection
sliderInput("AwardRequestedSelect",
"Award Requested:",
min = min(data.load$Award.Requested, na.rm = T),
max = max(data.load$Award.Requested, na.rm = T),
value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)),
step = 1)
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Requested, na.rm = T), 2)
valueBox("Avg Award Requested", value = num, icon = "fa-balance-scale", color = "purple")
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
renderGauge({
rate <- round(as.numeric(length(input$StateSelect)) / length(unique(data.load$State)) * 100, 1)
gauge(rate, min = 0, max = 100, symbol = '%', gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)))
})
renderPlotly({
dat <- iaInput()
ggplotly(
ggplot(data= dat, aes(x = Award.Length, fill = Grant.Type, text = paste0("<b>"))) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"),
tooltip = "text")
})
DT::renderDataTable({
subset(iaInput(), subset(data, select = c(Applicant, City, State, Project.Title, Grant.Type, Award.Requested, Location)))
})
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
class(starwars.load$height)
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length, c(""), c(NA)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.integer(Award.Length)
)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
# select Selection
selectInput("StateSelect",
"State:",
choices = sort(unique(data.load$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA","AR"))
# checkbox Selection
checkboxGroupInput("Private.Match.WaiverSelect",
"Private.Match.Waiver:",
choices = sort(unique(data.load$Private.Match.Waiver)),
selected = c("Yes", "No"))
# Award Requested Selection
sliderInput("AwardRequestedSelect",
"Award Requested:",
min = min(data.load$Award.Requested, na.rm = T),
max = max(data.load$Award.Requested, na.rm = T),
value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)),
step = 1)
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Requested, na.rm = T), 2)
valueBox("Avg Award Requested", value = num, icon = "fa-balance-scale", color = "purple")
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
renderValueBox({
sw <- swInput()
num <- round(mean(sw$height, na.rm = T), 2)
valueBox("Avg Height", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
renderGauge({
rate <- round(as.numeric(length(input$StateSelect)) / length(unique(data.load$State)) * 100, 1)
gauge(rate, min = 0, max = 100, symbol = '%', gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)))
})
renderPlotly({
dat <- iaInput()
ggplotly(
ggplot(data= dat, aes(x = Applicant, y = Award.Requested, fill = Award.Length , text = paste0("<b>", Applicant, ":</b>",
"<br>State:",State,
"<br>Award Requested:", Award.Requested
))) +
geom_point() +   theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
ggtitle("Count by Award Requested") +
xlab("Applicant") +
ylab("Award Requested"),
tooltip = "text")
})
renderPlotly({
dat <- iaInput()
ggplotly(
ggplot(data= dat, aes(x = Award.Length, fill = Grant.Type, text = paste0("<b>"))) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"),
tooltip = "text")
})
DT::renderDataTable({
subset(iaInput(), subset(data, select = c(Applicant, City, State, Project.Title, Grant.Type, Award.Requested, Location)))
})
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
class(data$Award.Length)
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length, c(""), c(NA)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.integer(Award.Length)
)
class(data$Award.Length)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
class(as.integer(data$Award.Length))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.integer(Award.Length)
)
class(data.load$Award.Length)
class(data.load$Award.Length)
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.numeric(Award.Length)
)
class(data.load$Award.Length)
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.factor(Award.Length)
)
class(data.load$Award.Length)
class(data.load$Award.Length)
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length,
c("","1 years","2 years","3 years","4 years","5 years"), c(NA,1,2,3,4,5)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.numeric(Award.Length)
)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
class(data.load$Award.Length)
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant),
Award.Length = as.integer(Award.Length)
)
class(data.load$Award.Length)
View(data.load)
data.load$Award.Length <- as.integer(data.load$Award.Length)
class(data.load$Award.Length)
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length,
c("","1 years","2 years","3 years","4 years","5 years"), c(NA,1,2,3,4,5)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant)
)
data.load$Award.Length <- as.integer(data.load$Award.Length)
class(data.load$Award.Length)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length,
c("","1 years","2 years","3 years","4 years","5 years"), c(NA,1,2,3,4,5)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant)
)
data.load$Award.Length <- as.integer(data.load$Award.Length)
print(class(data.load$Award.Length))
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
#Load and transform Data
data <- read.csv("./Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length,
c("","1 years","2 years","3 years","4 years","5 years"), c(NA,1,2,3,4,5)))
mutate(data.load, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant)
)
data.load$Award.Length <- as.integer(data.load$Award.Length)
iaInput <- reactive({
data <- data.load %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
# Private Match Waiver Filter
if (length(input$Private.Match.WaiverSelect)>0) {
data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)
}
return(data)
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Requested, na.rm = T), 2)
valueBox("Avg Award Requested", value = num, icon = "fa-balance-scale", color = "aqua", width = 6)
})
renderValueBox({
ia <- iaInput()
num <- round(mean(ia$Award.Length, na.rm = T), 2)
valueBox("Avg Award.Length", value = num, icon = "fa-sort-numeric-desc", color = "green", width = 3)
})
summary(data.load$Grant.Type)
View(data)
