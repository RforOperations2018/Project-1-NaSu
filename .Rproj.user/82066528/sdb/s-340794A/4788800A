{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(shinythemes)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plyr)\n\n\n#Load and transform Data\ndata <- read.csv(\"./Investingininnovation2010.csv\", header = TRUE)\n\ndata.load <- transform(data, \n                  Award.Length = mapvalues(Award.Length, c(\"\"), c(NA)))\n\nmutate(data.load, Project.Title = as.character(Project.Title),\n       Grant.Type = as.factor(Grant.Type),\n       State = as.factor(State),\n       Applicant = as.factor(Applicant))\n\n# Define UI for applicatio\nui <- navbarPage(\"Investing in Innovation Appplications NavBar\", \n                 tabPanel(\"Plot\",\n                          sidebarLayout(\n                            sidebarPanel(\n                              # State select\n                              selectInput(\"StateSelect\",\n                                          \"State:\",\n                                          choices = sort(unique(data.load$State)),\n                                          multiple = TRUE,\n                                          selectize = TRUE,\n                                          selected = c(\"MA\", \"VA\",\"AR\")),\n                              # checkbox Selection\n                              checkboxGroupInput(\"Private.Match.WaiverSelect\", \n                                                 \"Private.Match.Waiver:\",\n                                                 choices = sort(unique(data.load$Private.Match.Waiver)),\n                                                 selected = c(\"Yes\", \"No\")),\n                              # Award Requested Selection\n                              sliderInput(\"AwardRequestedSelect\",\n                                          \"Award Requested:\",\n                                          min = min(data.load$Award.Requested, na.rm = T),\n                                          max = max(data.load$Award.Requested, na.rm = T),\n                                          value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)),\n                                          step = 1),\n                            actionButton(\"reset\", \"Reset Filters\", icon = icon(\"refresh\"))\n                          ),\n                            # Output plot\n                            mainPanel(\n                              fluidRow(\n                                plotlyOutput(\"plot_length\")\n                                ),\n                              fluidRow(\n                                plotlyOutput(\"plot_requested\")\n                              ),\n                              fluidRow(\n                                plotlyOutput(\"plot_requested2\")\n                              )))),\n                 # Data Table\n                 tabPanel(\"Table\",\n                          inputPanel(\n                            downloadButton(\"downloadData\",\"Download Investing in Innovative Applications Data\")\n                          ),\n                          fluidPage(DT::dataTableOutput(\"table\"))\n                 )\n)\n\n\n# Define server logic\nserver <- function(input, output, session = session) {\n  # Filtered investing data\n  iaInput <- reactive({\n    data <- data.load %>%\n      # Slider Filter\n      filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])\n    # State Filter\n    if (length(input$StateSelect) > 0 ) {\n      data <- subset(data, State %in% input$StateSelect)\n    }\n    # Private Match Waiver Filter\n    if (length(input$Private.Match.WaiverSelect)>0) {\n      data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)\n    }\n    return(data)\n  })\n\n  # plot three figures\n  output$plot_length <- renderPlotly({\n    dat <- iaInput()\n    ggplotly(\n      ggplot(data= dat, aes(x = Award.Length, fill = Grant.Type, text = paste0(\"<b>\"))) + \n        geom_bar() + \n        ggtitle(\"Count by Award Length\") +\n        xlab(\"Award Length\") +\n        ylab(\"Count\"),\n        tooltip = \"text\")\n    })\n  output$plot_requested <- renderPlotly({\n    dat <- iaInput() \n    ggplotly(\n      ggplot(data= dat, aes(x = Applicant, y = Award.Requested, fill = Award.Length , text = paste0(\"<b>\", Applicant, \":</b>\",\n                                                                                                    \"<br>State:\",State,\n                                                                                                    \"<br>Award Requested:\", Award.Requested\n                                                                                                    ))) + \n        geom_point() +   theme(axis.title.x=element_blank(),\n                               axis.text.x=element_blank(),\n                               axis.ticks.x=element_blank()) +\n        ggtitle(\"Count by Award Requested\") +\n        xlab(\"Applicant\") +\n        ylab(\"Award Requested\"),\n      tooltip = \"text\") \n    })\n  output$plot_requested2 <- renderPlotly({\n    dat <- iaInput() \n    ggplotly(\n      ggplot(data= dat, aes(x = Award.Requested, fill = Award.Length)) + \n        geom_histogram() +   theme(axis.title.x=element_blank(),\n                               axis.text.x=element_blank(),\n                               axis.ticks.x=element_blank()) +\n        ggtitle(\"Count by Award Requested\") +\n        xlab(\"Award Requested\") +\n        ylab(\"Count\")) \n  })\n  # Data Table\n  output$table <- DT::renderDataTable({\n    data <- iaInput()\n    \n    subset(data, select = c(Applicant, City, State, Project.Title, Grant.Type, Award.Requested, Location))\n  })\n  # Updating the URL Bar\n  observe({\n    print(reactiveValuesToList(input))\n    session$doBookmark()\n  })\n  onBookmarked(function(url) {\n    updateQueryString(url)\n  })\n  # Download data in the datatable\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"investing-in-innovative-applications\", Sys.Date(), \".csv\", sep=\"\")\n    },\n    content = function(file) {\n      write.csv(swInput(), file)\n    }\n  )\n  # Reset Filter Data\n  observeEvent(input$reset, {\n    updateSelectInput(session, \"StateSelect\", selected = c(\"MA\", \"VA\",\"AR\"))\n    updateSliderInput(session, \"AwardRequestedSelect\", value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)))\n    updateCheckboxGroupInput(session, \"Private.Match.WaiverSelect\", choices = sort(unique(data.load$Private.Match.Waiver)), selected = c(\"Yes\", \"No\"))\n    showNotification(\"You have successfully reset the filters\", type = \"message\")\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, enableBookmarking = \"url\")\n",
    "created" : 1537492206509.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1162011004",
    "id" : "4788800A",
    "lastKnownWriteTime" : 1536973095,
    "last_content_update" : 1536973095,
    "path" : "C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/hw2_app_NaSu.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}