{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Starwars Flex Dashboard\"\nruntime: shiny\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: row\n    vertical_layout: fill\n    theme: sandstone\n    favicon: favicon.ico\n---\n\n```{r setup, include=FALSE}\nlibrary(flexdashboard)\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(shinythemes)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plyr)\n\n#Load and transform Data\ndata <- read.csv(\"./Investingininnovation2010.csv\", header = TRUE)\n\ndata.load <- transform(data, \n                  Award.Length = mapvalues(Award.Length,\n                                           c(\"\",\"1 years\",\"2 years\",\"3 years\",\"4 years\",\"5 years\"), c(NA,1,2,3,4,5)))\n\nmutate(data.load, Project.Title = as.character(Project.Title),\n       Grant.Type = as.factor(Grant.Type),\n       State = as.factor(State),\n       Applicant = as.factor(Applicant)\n       )\ndata.load$Award.Length <- as.integer(data.load$Award.Length)\n\niaInput <- reactive({\n  data <- data.load %>%\n    # Slider Filter\n    filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])\n  # State Filter\n  if (length(input$StateSelect) > 0 ) {\n    data <- subset(data, State %in% input$StateSelect)\n  }\n  # Grant.Type Filter\n  if (length(input$Grant.TypeSelect) > 0 ) {\n    data <- subset(data, Grant.Type %in% input$Grant.TypeSelect)\n  }\n  # Private Match Waiver Filter\n  if (length(input$Private.Match.WaiverSelect)>0) {\n    data <- subset(data, Private.Match.Waiver %in% input$Private.Match.WaiverSelect)\n  }\n  return(data)\n})\n\n\n```\n\nPlot\n=====================================\n\nSidebar {.sidebar}\n-------------------------------------\n\n```{r}\n# select Selection\nselectInput(\"StateSelect\",\n            \"State:\",\n            choices = sort(unique(data.load$State)),\n            multiple = TRUE,\n            selectize = TRUE,\n            selected = c(\"MA\", \"VA\",\"AR\"))\n# select Selection\nselectInput(\"GrantTypeSelect\",\n            \"GrantType:\",\n            choices = sort(unique(data.load$Grant.Type)),\n            multiple = TRUE,\n            selectize = TRUE,\n            selected = c(\"Development\"))\n# checkbox Selection\ncheckboxGroupInput(\"Private.Match.WaiverSelect\", \n                   \"Private.Match.Waiver:\",\n                   choices = sort(unique(data.load$Private.Match.Waiver)),\n                   selected = c(\"Yes\", \"No\"))\n# Award Requested Selection\nsliderInput(\"AwardRequestedSelect\",\n            \"Award Requested:\",\n            min = min(data.load$Award.Requested, na.rm = T),\n            max = max(data.load$Award.Requested, na.rm = T),\n            value = c(min(data.load$Award.Requested, na.rm = T), max(data.load$Award.Requested, na.rm = T)),\n            step = 1)\n```\n\nRow \n-------------------------------------\n\n###\n\n```{r}\nrenderValueBox({\n  ia <- iaInput()\n  num <- round(mean(ia$Award.Requested, na.rm = T), 0)\n  \n  valueBox(\"Avg Award Requested\", value = num, icon = \"fa-balance-scale\", color = \"teal\")\n})\n```\n\n\n###\n\n```{r}\nrenderValueBox({\n  ia <- iaInput()\n  num <- round(mean(ia$Award.Length, na.rm = T), 2)\n\n  valueBox(\"Avg Award.Length\", value = num, icon = \"fa-sort-numeric-desc\", color = \"green\")\n})\n\n```\n\n\n### Worlds Selected\n\n```{r}\nrenderGauge({\n  rate <- round(as.numeric(length(input$StateSelect)) / length(unique(data.load$State)) * 100, 1)\n  gauge(rate, min = 0, max = 100, symbol = '%', gaugeSectors(\n  success = c(80, 100), warning = c(40, 79), danger = c(0, 39)))\n})\n```\n\nRow {.tabset .tabset-fade}\n-------------------------------------\n### Mass\n\n```{r}\nrenderPlotly({\n      data <- iaInput() \n    ggplotly(\n      ggplot(data= data, aes(x = Applicant, y = Award.Requested, fill = Grant.Type )) + \n        geom_point() +   theme(axis.title.x=element_blank(),\n                               axis.text.x=element_blank(),\n                               axis.ticks.x=element_blank()) +\n        ggtitle(\"Count by Award Requested\") +\n        xlab(\"Applicant\") +\n        ylab(\"Award Requested\"),\n      tooltip = \"text\") \n})\n```\n\n### Height\n\n```{r}\nrenderPlotly({\n    data <- iaInput()\n    ggplotly(\n      ggplot(data= data, aes(x = Award.Length, fill = Grant.Type)) + \n        geom_bar() + \n        ggtitle(\"Count by Award Length\") +\n        xlab(\"Award Length\") +\n        ylab(\"Count\"),\n        tooltip = \"text\")\n})\n```\n\nTable\n=====================================\n\nRow \n-------------------------------------\n### Table \n\n```{r}\nDT::renderDataTable({\n  subset(iaInput(), subset(data, select = c(Applicant, City, State, Project.Title, Grant.Type, Award.Requested, Location)))\n})\n```\n\nRow \n-------------------------------------\n\n```{r}\nlibrary(shiny)\n\nui <- fluidPage(\n  \n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)\n```",
    "created" : 1537491923983.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1374939362",
    "id" : "AB26CB49",
    "lastKnownWriteTime" : 1537491833,
    "last_content_update" : 1537491833,
    "path" : "C:/Users/sunas/Desktop/Courses/R shiny/Project-1-NaSu/Project-1-NaSu/Project-1-NaSu.Rmd",
    "project_path" : "Project-1-NaSu.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}